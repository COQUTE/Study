-- 모든 학생은 학생번호를 부여하여 식별하며 학생이름, 학생주소, 학생전화번호. 학생이메일, 전공 학과,
-- 지도교수 정보, 등록금 납부 계좌 정보를 가진다.
-- 학생은 부전공을 1개까지 신청할 수 있다. 학생은 한학기에 최대 10학점까지만 수강 할 수 있다.

-- 교수와 학생은 학생번호와 교수번호를 이용한 지도 관계를 가지며, 해당 관계에는 현재 학년/학기 정보를 포함한다.

-- 학생은 1개 이상의 동아리에 가입이 가능하다.

-- 1. 학생 테이블
CREATE TABLE TB_STUDENT(
STD_ID NUMBER PRIMARY KEY,
STD_NAME VARCHAR2(45) NOT NULL,
STD_ADDRESS VARCHAR2(45),
STD_PHONE VARCHAR2(45) NOT NULL,
STD_EMAIL VARCHAR2(45),
DEPT_TITLE VARCHAR2(45) NOT NULL,
MINOR_TITLE VARCHAR2(45) DEFAULT NULL,
ACCOUNT_NUM VARCHAR2(45) NOT NULL,
FOREIGN KEY (DEPT_TITLE) REFERENCES TB_DEPARTMENT(DEPT_TITLE) ON DELETE SET NULL
);

-- ** 외래키 학과이름 추가 **


-- 학과는 학과번호를 부여하여 식별하며 학과명, 학과전화번호, 학과사무실 정보를 가진다. 해당 학과에서 개설하는 강좌가 반드시 1개 이상 존재해야 하며, 동시에 학과장이 1명 있어야 한다.
-- 강좌테이블에서 학과코드 참조

-- 2. 학과 테이블
CREATE TABLE TB_DEPARTMENT(
DEPT_CODE VARCHAR2(45) PRIMARY KEY,
DEPT_TITLE VARCHAR2(45) NOT NULL,
DEPT_TEL VARCHSR2(45) NOT NULL,
DEPT_OFFICE VARCHAR2(45),
PROF_BOSS VARCHAR2(45) NOT NULL,
FOREIGN KEY (PROF_BOSS) REFERENCES TB_PROFESSOR(PROF_ID) ON DELETE SET NULL
);


-- 3. 교수 테이블
CREATE TABLE TB_PROFESSOR (
PROF_ID NUMBER PRIMARY KEY,
PROF_NAME VARCHAR2(45) NOT NULL,
PROF_ADDRESS VARCHAR2(45),
PROF_PHONE VARCHAR2(45),
PROF_EMAIL VARCHAR2(45)
);

-- 강좌는 강좌번호, 분반번호, 강의하는 교수, 강좌이름, 강의요일, 강의교시,
-- 취득학점 (1~4), 강좌시간 (1~6), 개설 학과, 강의실 정보가 필요하다.

--4. 강의 테이블
CREATE TABLE TB_LECTURE(
LCT_ID NUMBER PRIMARY,
CLASS_ID varchar2(45) NOT NULL,
PROF_ID NUMBER NOT NULL,
LCT_NAME VARCHAR2(45) NOT NULL,
LCT_DAY CHAR(1),
LCT_PERIOD NUMBER,
CREDIT NUMBER CHECK (CREDIT IN (1, 2, 3, 4)),
LCT_HOUR NUMBER (LCT_HOUR IN (1, 2, 3, 4, 5, 6)),
DEPT_CODE VARCHAR2(45),
LCT_ROOM VARCHAR2(45),
LCT_INFO VARCHAR2(45) NOT NULL,
FOREIGN KEY (PROF_ID) REFERENCES TB_PROFESSOR(PROF_ID) ON DELETE SET NULL,
FOREIGN KEY (DEPT_CODE) REFERENCES TB_DEPARTMENT(DEPT_CODE) ON DELETE SET NULL
);

-- 수강내역은 학생번호, 강좌번호. 교수번호를 부여하여 식별하며
-- 출석점수, 중간고사점수, 기말고사점수, 기타 점수, 총점 (0 ~ 100), 평점 (A ~ F) 정보를 가진다.
-- 5. 강의 목록 테이블
CREATE TABLE TB_LECTURE_LIST(
STD_ID VARCHAR2(45),
LCT_ID NUMBER,
PROF_ID NUMBER,
ATTENDANCE_SCR NUMBER,
MIDDLE_SCR NUMBER,
FINAL_SCR NUMBER,
ECT_SCORE NUMBER,
TOTAL NUMBER CHECK (TOTAL BETWEEN 0 AND 100),
GRADE CHAR(1) CHECK (GRADE IN ('A', 'B', 'C', 'D', 'E', 'F'),
PRIMARY KEY(STD_ID, LCT_ID, PROF_ID),
FOREIGN KEY (STD_ID) REFERENCES TB_STUDENT(STD_ID) ON DELETE SET NULL,
FOREIGN KEY (LCT_ID) REFERENCES TB_LECTURE(LCT_ID) ON DELETE CASCADE,
FOREIGN KEY (PROF_ID) REFERENCES TB_PROFESSOR(PROF_ID) ON DELETE SET NULL
);

-- 학생은 1개 이상의 동아리에 가입이 가능하다.
-- 동아리는 동아리 번호, 동아리 이름, 소속 학생 숫자, 회장 학생 정보,
-- 동아리 지도 교수 정보, 동아리방 정보 등을 가져야 한다.
-- 6. 동아리 테이블
CREATE TABLE TB_CLUB(
C_ID NUMBER PRIMARY KEY,
C_NAME VARCHAR2(45),
STD_TOTAL NUMBER,
BOSS_ID VARCHAR2(45),
PROF_ID VARCHAR2(45),
ROOM_ID VARCHAR2(45),
FOREIGN KEY (BOSS_ID) REFERENCES TB_STUDENT(STD_ID) ON DELETE SET NULL,
FOREIGN KEY (PROF_ID) REFERENCES TB_PROFESSOR(PROF_ID) ON DELETE SET NULL
);

-- 학생별 등록금 납부 내역을 기록해야 한다.
-- 학생 번호, 등록금 납부 연도, 등록금 납부 학기, 등록금 총액,
-- 납부 총액, 마지막 납부 일자가 기록되야 한다.
-- 납부 총액이 등록금 총액 보다 작을 경우에는 수강내역 “신규 삽입”에서 “등록금 미납”오류를 표시해야 한다.
-- 7. 계좌 정보 테이블
CREATE TABLE TB_PAYMENT(
STD_ID VARCHAR2(45) PRIMARY KEY,
PAY_YEAR NUMBER,
PAY-SEMESTER NUMBER,
TUITION_TOTAL NUMBER,
PAY_TOTAL NUMBER,
LAST_PAYDATE DATE DEFAULT SYSDATE,
FOREIGN KEY (STD_ID) REFERENCES TB_STUDENT(STD_ID) ON DELETE SET NULL,
);


-- 8. 학생-교수 관계 테이블
CREATE TABLE TB_RELATION(
STD_ID NUMBER,
PROF_ID NUMBER,
NOW_INFO VARCHAR2(45),
PRIMARY KEY(STD_ID, PROF_ID),
FOREIGN KEY (STD_ID) REFERENCES TB_STUDENT(STD_ID) ON DELETE CASCADE,
FOREIGN KEY (PROF_ID) REFERENCES TB_PROFESSOR(PROF_ID) ON DELETE SET NULL
);


-- 9. 동아리 멤버 테이블
CREATE TABLE TB_CLUB_MEMBER(
STD_ID NUMBER PRIMARY KEY,
C_ID NUMBER NOT NULL,
FOREIGN KEY (STD_ID) REFERENCES TB_STUDENT(STD_ID) ON DELETE CASCADE,
FOREIGN KEY (C_ID) REFERENCES TB_CLUB(C_ID) ON DELETE CASCADE
);


-- 10. 학과-교수 테이블
CREATE TABLE TB_DEPT_PROF(
PROF_ID NUMBER NOT NULL,
DEPT_CODE NUMBER NOT NULL,
PRIMARY KEY(PROF_ID, DEPT_CODE),
FOREIGN KEY (PROF_ID) REFERENCES TB_PROFESSOR(PROF_ID) ON DELETE CASCADE,
FOREIGN KEY (DEPT_CODE) REFERENCES TB_DEPARTMENT(DEPT_CODE) ON DELETE SET NULL
);